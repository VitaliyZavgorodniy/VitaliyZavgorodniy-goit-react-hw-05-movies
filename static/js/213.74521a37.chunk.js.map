{"version":3,"file":"static/js/213.74521a37.chunk.js","mappings":"6RAgCMA,EAAUC,EAAAA,GAAAA,IAAH,0PAGa,SAACC,GAAD,OAAOA,EAAEC,MAAMC,aAE9BC,EAAAA,EAAAA,OAIAA,EAAAA,EAAAA,SAULC,EAAQL,EAAAA,GAAAA,IAAH,mMAMAI,EAAAA,EAAAA,OAIAA,EAAAA,EAAAA,SAKLE,EAAUN,EAAAA,GAAAA,QAAH,wCAIPO,EAAQP,EAAAA,GAAAA,GAAH,2IAKA,SAACC,GAAD,OAAOA,EAAEC,MAAMM,aAGpBC,EAAST,EAAAA,GAAAA,EAAH,iIAKD,SAACC,GAAD,OAAOA,EAAEC,MAAMQ,eAU1B,EAxFkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,WAAYC,EAA1B,EAA0BA,OAA1B,OAChB,SAAC,KAAD,CAAMC,GAAE,kBAAaJ,GAArB,UACE,UAACZ,EAAD,YACE,SAACM,EAAD,WACE,UAACC,EAAD,YACE,mBACEU,OAAM,yCAAoCH,GAC1CI,MAAM,wBAER,mBACED,OAAM,yCAAoCH,GAC1CI,MAAM,yBAER,gBACEC,IAAKN,EACLO,QAAQ,OACRC,IAAG,yCAAoCP,WAK7C,SAACN,EAAD,UAAQK,KACR,SAACH,EAAD,UAASK,UCVTf,EAAUC,EAAAA,GAAAA,GAAH,+RAOFI,EAAAA,EAAAA,OAMAA,EAAAA,EAAAA,SAKLiB,EAAOrB,EAAAA,GAAAA,GAAH,8SAICI,EAAAA,EAAAA,OAMAA,EAAAA,EAAAA,SAkBX,EAzDsB,SAAC,GAAc,IAAZkB,EAAW,EAAXA,KAQvB,OAAO,SAAC,EAAD,UAAUA,EAAKC,OAAS,EAN7BD,EAAKE,KAAI,SAACC,GAAD,OACP,SAACJ,EAAD,WACE,SAAC,GAAD,UAAeI,KADNA,EAAKd,OAKiC,Q,mBCd1Ce,EAAiB,SAACC,EAAYC,GACzC,GAAID,EAAWJ,QAAUK,EAAK,CAC5B,IAAMC,EAAMD,EAAIJ,KAAI,SAACM,GAAD,OAAQH,EAAWI,MAAK,SAACC,GAAD,OAAWA,EAAMrB,KAAOmB,QACjEN,KAAI,SAACC,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMQ,QACpBC,KAAK,MAER,GAAIL,EAAK,OAAOA,EAGlB,MAAO,IC8BT,EA5BiB,SAAC,GAAoB,IAAlBF,EAAiB,EAAjBA,WAClB,GAAoCQ,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KASA,OAPAC,EAAAA,EAAAA,YAAU,WACJX,EAAWJ,SACbgB,EAAAA,EAAAA,MAAgBC,MAAK,SAACC,GAAD,OACnBJ,ECfoB,SAACV,EAAYL,GAAb,OAC1BA,EAAKE,KAAI,SAACC,GAAD,MAAW,CAClBd,GAAIc,EAAKd,GACTC,MAAOa,EAAKb,MACZC,WAAYY,EAAKiB,YACjB5B,OAAQY,EAAeC,EAAYF,EAAKkB,eDUtBC,CAAajB,EAAYc,EAAInB,YAE9C,CAACK,KAGF,SAACkB,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,WACE,SAAC,EAAD,CAAexB,KAAMc","sources":["components/MoviesGallery/MovieCard/MovieCard.jsx","components/MoviesGallery/MoviesGallery.jsx","utils/filteredGenres.js","pages/HomePage/HomePage.jsx","utils/mappedMoviesList.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { breakpoints } from 'constants/breakpoints';\n\nconst MovieCard = ({ id, title, posterPath, genres }) => (\n  <Link to={`/movies/${id}`}>\n    <Wrapper>\n      <Thumb>\n        <Picture>\n          <source\n            srcSet={`https://themoviedb.org/t/p/w342${posterPath}`}\n            media=\"(min-width: 768px)\"\n          />\n          <source\n            srcSet={`https://themoviedb.org/t/p/w342${posterPath}`}\n            media=\"(min-width: 1024px)\"\n          />\n          <img\n            alt={title}\n            loading=\"lazy\"\n            src={`https://themoviedb.org/t/p/w342${posterPath}`}\n          />\n        </Picture>\n      </Thumb>\n\n      <Title>{title}</Title>\n      <Genres>{genres}</Genres>\n    </Wrapper>\n  </Link>\n);\n\nconst Wrapper = styled.div`\n  width: 280px;\n  transform: scale(1);\n  transition: transform ${(p) => p.theme.transition};\n\n  @media ${breakpoints.tablet} {\n    width: 336px;\n  }\n\n  @media ${breakpoints.desktop} {\n    width: 305px;\n  }\n\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.04);\n  }\n`;\n\nconst Thumb = styled.div`\n  height: 402px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  overflow: hidden;\n\n  @media ${breakpoints.tablet} {\n    height: 455px;\n  }\n\n  @media ${breakpoints.desktop} {\n    height: 449px;\n  }\n`;\n\nconst Picture = styled.picture`\n  width: 100%;\n`;\n\nconst Title = styled.h3`\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 12px / 14px;\n  color: ${(p) => p.theme.mainColor};\n`;\n\nconst Genres = styled.p`\n  margin-top: 4px;\n  font-size: 12px;\n  line-height: 12px / 14px;\n  font-weight: 500;\n  color: ${(p) => p.theme.accentColor};\n`;\n\nMovieCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  posterPath: PropTypes.string.isRequired,\n  genres: PropTypes.string,\n};\n\nexport default MovieCard;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { breakpoints } from 'constants/breakpoints';\n\nimport MovieCard from './MovieCard';\n\nconst MoviesGallery = ({ list }) => {\n  const renderGallery = () =>\n    list.map((item) => (\n      <Item key={item.id}>\n        <MovieCard {...item} />\n      </Item>\n    ));\n\n  return <Wrapper>{list.length > 0 ? renderGallery() : null}</Wrapper>;\n};\n\nconst Wrapper = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  align-items: center;\n  margin-left: -20px;\n\n  @media ${breakpoints.tablet} {\n    flex-direction: row;\n    align-items: flex-start;\n    margin-left: -32px;\n  }\n\n  @media ${breakpoints.desktop} {\n    margin-left: -16px;\n  }\n`;\n\nconst Item = styled.li`\n  margin-left: 20px;\n  margin-top: 20px;\n\n  @media ${breakpoints.tablet} {\n    flex-basis: calc((100% - (2 * 32px)) / 2);\n    margin-left: 32px;\n    margin-top: 32px;\n  }\n\n  @media ${breakpoints.desktop} {\n    flex-basis: calc((100% - (3 * 16px)) / 3);\n    margin-left: 16px;\n    margin-top: 32px;\n  }\n`;\n\nMoviesGallery.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      posterPath: PropTypes.string.isRequired,\n      genres: PropTypes.string,\n    })\n  ),\n};\n\nexport default MoviesGallery;\n","export const filteredGenres = (genresList, IDs) => {\n  if (genresList.length && IDs) {\n    const str = IDs.map((ID) => genresList.find((genre) => genre.id === ID))\n      .map((item) => item?.name)\n      .join(', ');\n\n    if (str) return str;\n  }\n\n  return '';\n};\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { fetchTrending } from 'services/fetchMoviesData';\n\nimport MoviesGallery from 'components/MoviesGallery';\nimport Container from 'components/UI/Container';\nimport Section from 'components/UI/Section';\n\nimport { mappedMovies } from 'utils/mappedMoviesList';\n\nconst HomePage = ({ genresList }) => {\n  const [moviesList, setMoviesList] = useState([]);\n\n  useEffect(() => {\n    if (genresList.length)\n      fetchTrending().then((res) =>\n        setMoviesList(mappedMovies(genresList, res.list))\n      );\n  }, [genresList]);\n\n  return (\n    <Section>\n      <Container>\n        <MoviesGallery list={moviesList} />\n      </Container>\n    </Section>\n  );\n};\n\nHomePage.propTypes = {\n  genresList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default HomePage;\n","import { filteredGenres } from 'utils/filteredGenres';\n\nexport const mappedMovies = (genresList, list) =>\n  list.map((item) => ({\n    id: item.id,\n    title: item.title,\n    posterPath: item.poster_path,\n    genres: filteredGenres(genresList, item.genre_ids),\n  }));\n"],"names":["Wrapper","styled","p","theme","transition","breakpoints","Thumb","Picture","Title","mainColor","Genres","accentColor","id","title","posterPath","genres","to","srcSet","media","alt","loading","src","Item","list","length","map","item","filteredGenres","genresList","IDs","str","ID","find","genre","name","join","useState","moviesList","setMoviesList","useEffect","fetchTrending","then","res","poster_path","genre_ids","mappedMovies","Section","Container"],"sourceRoot":""}