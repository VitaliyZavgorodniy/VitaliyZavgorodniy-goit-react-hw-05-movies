{"version":3,"file":"static/js/35.7d9ae32f.chunk.js","mappings":"2PA6BMA,EAAUC,EAAAA,GAAAA,IAAH,0PAGa,SAACC,GAAD,OAAOA,EAAEC,MAAMC,aAE9BC,EAAAA,EAAAA,OAIAA,EAAAA,EAAAA,SAULC,EAAQL,EAAAA,GAAAA,IAAH,gPAKW,SAACC,GAAD,OAAOA,EAAEC,MAAMI,eAE1BF,EAAAA,EAAAA,OAIAA,EAAAA,EAAAA,SAKLG,EAAUP,EAAAA,GAAAA,QAAH,wCAIPQ,EAAQR,EAAAA,GAAAA,GAAH,2IAKA,SAACC,GAAD,OAAOA,EAAEC,MAAMO,aAGpBC,EAASV,EAAAA,GAAAA,EAAH,iIAKD,SAACC,GAAD,OAAOA,EAAEC,MAAMS,eAU1B,EAvFkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,WAAYC,EAAtB,EAAsBA,OAAtB,OAChB,UAACf,EAAD,YACE,SAACM,EAAD,WACE,UAACE,EAAD,YACE,mBACEQ,OAAM,yCAAoCF,GAC1CG,MAAM,wBAER,mBACED,OAAM,yCAAoCF,GAC1CG,MAAM,yBAER,gBACEC,IAAKL,EACLM,QAAQ,OACRC,IAAG,yCAAoCN,WAK7C,SAACL,EAAD,UAAQI,KACR,SAACF,EAAD,UAASI,QCHPf,EAAUC,EAAAA,GAAAA,GAAH,yQAKFI,EAAAA,EAAAA,OAOAA,EAAAA,EAAAA,SAKLgB,EAAOpB,EAAAA,GAAAA,GAAH,8SAICI,EAAAA,EAAAA,OAMAA,EAAAA,EAAAA,SAkBX,EA5DsB,SAAC,GAAc,IAAZiB,EAAW,EAAXA,KACjBC,GAAWC,EAAAA,EAAAA,MAWjB,OAAO,SAAC,EAAD,UAAUF,EAAKG,OARpBH,EAAKI,KAAI,SAACC,GAAD,OACP,SAACN,EAAD,WACE,SAAC,KAAD,CAAMO,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMR,GAA/C,UACE,SAAC,GAAD,UAAeI,OAFRA,EAAKE,OAO6B,S,6JCyBnD,EAhCiB,SAAC,GAAoB,IAAlBG,EAAiB,EAAjBA,WAClB,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOd,EAAP,KAAgBe,EAAhB,KACA,GAAoCD,EAAAA,EAAAA,UAAS,IAA7C,eAAOE,EAAP,KAAmBC,EAAnB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACJL,EAAWP,SACba,EAAAA,EAAAA,MAAgBC,MAAK,SAACC,GACpBN,GAAW,GACXE,GAAcK,EAAAA,EAAAA,GAAaT,EAAYQ,EAAIlB,YAE9C,CAACU,IAEAb,GAAgB,SAACuB,EAAA,EAAD,KAGlB,SAACC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,CAAevB,KAAMa,U,qDC7BtB,IAAMW,EAAiB,SAACd,EAAYe,GACzC,GAAIf,EAAWP,QAAUsB,EAAK,CAC5B,IAAMC,EAAMD,EAAIrB,KAAI,SAACuB,GAAD,OAAQjB,EAAWkB,MAAK,SAACC,GAAD,OAAWA,EAAMtB,KAAOoB,QACjEvB,KAAI,SAACC,GAAD,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAMyB,QACpBC,KAAK,MAER,GAAIL,EAAK,OAAOA,EAGlB,MAAO,ICPIP,EAAe,SAACT,EAAYV,GAAb,OAC1BA,EAAKI,KAAI,SAACC,GAAD,MAAW,CAClBE,GAAIF,EAAKE,GACThB,MAAOc,EAAKd,MACZC,WAAYa,EAAK2B,YACjBvC,OAAQ+B,EAAed,EAAYL,EAAK4B","sources":["components/MoviesGallery/MovieCard/MovieCard.jsx","components/MoviesGallery/MoviesGallery.jsx","pages/HomePage/HomePage.jsx","utils/filteredGenres.js","utils/mappedMoviesList.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { breakpoints } from 'constants/breakpoints';\n\nconst MovieCard = ({ title, posterPath, genres }) => (\n  <Wrapper>\n    <Thumb>\n      <Picture>\n        <source\n          srcSet={`https://themoviedb.org/t/p/w342${posterPath}`}\n          media=\"(min-width: 768px)\"\n        />\n        <source\n          srcSet={`https://themoviedb.org/t/p/w342${posterPath}`}\n          media=\"(min-width: 1024px)\"\n        />\n        <img\n          alt={title}\n          loading=\"lazy\"\n          src={`https://themoviedb.org/t/p/w342${posterPath}`}\n        />\n      </Picture>\n    </Thumb>\n\n    <Title>{title}</Title>\n    <Genres>{genres}</Genres>\n  </Wrapper>\n);\n\nconst Wrapper = styled.div`\n  width: 280px;\n  transform: scale(1);\n  transition: transform ${(p) => p.theme.transition};\n\n  @media ${breakpoints.tablet} {\n    width: 336px;\n  }\n\n  @media ${breakpoints.desktop} {\n    width: 305px;\n  }\n\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.04);\n  }\n`;\n\nconst Thumb = styled.div`\n  /* height: 402px; */\n  margin-bottom: 10px;\n  border-radius: 5px;\n  overflow: hidden;\n  background-color: ${(p) => p.theme.skeletonFrom};\n\n  @media ${breakpoints.tablet} {\n    /* height: 405px; */\n  }\n\n  @media ${breakpoints.desktop} {\n    /* height: 449px; */\n  }\n`;\n\nconst Picture = styled.picture`\n  width: 100%;\n`;\n\nconst Title = styled.h3`\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 12px / 14px;\n  color: ${(p) => p.theme.mainColor};\n`;\n\nconst Genres = styled.p`\n  margin-top: 4px;\n  font-size: 12px;\n  line-height: 12px / 14px;\n  font-weight: 500;\n  color: ${(p) => p.theme.accentColor};\n`;\n\nMovieCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  posterPath: PropTypes.string.isRequired,\n  genres: PropTypes.string,\n};\n\nexport default MovieCard;\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { breakpoints } from 'constants/breakpoints';\n\nimport MovieCard from './MovieCard';\n\nconst MoviesGallery = ({ list }) => {\n  const location = useLocation();\n\n  const renderGallery = () =>\n    list.map((item) => (\n      <Item key={item.id}>\n        <Link to={`/movies/${item.id}`} state={{ from: location }}>\n          <MovieCard {...item} />\n        </Link>\n      </Item>\n    ));\n\n  return <Wrapper>{list.length ? renderGallery() : null}</Wrapper>;\n};\n\nconst Wrapper = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin-left: -20px;\n\n  @media ${breakpoints.tablet} {\n    flex-direction: row;\n    align-items: flex-start;\n    flex-wrap: wrap;\n    margin-left: -32px;\n  }\n\n  @media ${breakpoints.desktop} {\n    margin-left: -16px;\n  }\n`;\n\nconst Item = styled.li`\n  margin-left: 20px;\n  margin-top: 20px;\n\n  @media ${breakpoints.tablet} {\n    flex-basis: calc((100% - (2 * 32px)) / 2);\n    margin-left: 32px;\n    margin-top: 32px;\n  }\n\n  @media ${breakpoints.desktop} {\n    flex-basis: calc((100% - (3 * 16px)) / 3);\n    margin-left: 16px;\n    margin-top: 32px;\n  }\n`;\n\nMoviesGallery.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      posterPath: PropTypes.string.isRequired,\n      genres: PropTypes.string,\n    })\n  ),\n};\n\nexport default MoviesGallery;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { fetchTrending } from 'services/fetchMoviesData';\n\nimport SkeletonHomePage from 'components/Skeletons/SkeletonHomePage';\nimport MoviesGallery from 'components/MoviesGallery';\nimport Container from 'components/UI/Container';\nimport Section from 'components/UI/Section';\n\nimport { mappedMovies } from 'utils/mappedMoviesList';\n\nconst HomePage = ({ genresList }) => {\n  const [loading, setLoading] = useState(true);\n  const [moviesList, setMoviesList] = useState([]);\n\n  useEffect(() => {\n    if (genresList.length)\n      fetchTrending().then((res) => {\n        setLoading(false);\n        setMoviesList(mappedMovies(genresList, res.list));\n      });\n  }, [genresList]);\n\n  if (loading) return <SkeletonHomePage />;\n\n  return (\n    <Section>\n      <Container>\n        <MoviesGallery list={moviesList} />\n      </Container>\n    </Section>\n  );\n};\n\nHomePage.propTypes = {\n  genresList: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default HomePage;\n","export const filteredGenres = (genresList, IDs) => {\n  if (genresList.length && IDs) {\n    const str = IDs.map((ID) => genresList.find((genre) => genre.id === ID))\n      .map((item) => item?.name)\n      .join(', ');\n\n    if (str) return str;\n  }\n\n  return '';\n};\n","import { filteredGenres } from 'utils/filteredGenres';\n\nexport const mappedMovies = (genresList, list) =>\n  list.map((item) => ({\n    id: item.id,\n    title: item.title,\n    posterPath: item.poster_path,\n    genres: filteredGenres(genresList, item.genre_ids),\n  }));\n"],"names":["Wrapper","styled","p","theme","transition","breakpoints","Thumb","skeletonFrom","Picture","Title","mainColor","Genres","accentColor","title","posterPath","genres","srcSet","media","alt","loading","src","Item","list","location","useLocation","length","map","item","to","id","state","from","genresList","useState","setLoading","moviesList","setMoviesList","useEffect","fetchTrending","then","res","mappedMovies","SkeletonHomePage","Section","Container","MoviesGallery","filteredGenres","IDs","str","ID","find","genre","name","join","poster_path","genre_ids"],"sourceRoot":""}