{"version":3,"file":"static/js/77.899086a3.chunk.js","mappings":"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","sources":["components/MoviesGallery/MovieCard/MovieCard.jsx","components/MoviesGallery/MoviesGallery.jsx","components/SearchForm/SearchFrom.jsx","pages/MoviePage/MoviePage.jsx","utils/filteredGenres.js","utils/mappedMoviesList.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { breakpoints } from 'constants/breakpoints';\n\nconst MovieCard = ({ id, title, posterPath, genres }) => (\n  <Link to={`/movies/${id}`}>\n    <Wrapper>\n      <Thumb>\n        <Picture>\n          <source\n            srcSet={`https://themoviedb.org/t/p/w342${posterPath}`}\n            media=\"(min-width: 768px)\"\n          />\n          <source\n            srcSet={`https://themoviedb.org/t/p/w342${posterPath}`}\n            media=\"(min-width: 1024px)\"\n          />\n          <img\n            alt={title}\n            loading=\"lazy\"\n            src={`https://themoviedb.org/t/p/w342${posterPath}`}\n          />\n        </Picture>\n      </Thumb>\n\n      <Title>{title}</Title>\n      <Genres>{genres}</Genres>\n    </Wrapper>\n  </Link>\n);\n\nconst Wrapper = styled.div`\n  width: 280px;\n  transform: scale(1);\n  transition: transform ${(p) => p.theme.transition};\n\n  @media ${breakpoints.tablet} {\n    width: 336px;\n  }\n\n  @media ${breakpoints.desktop} {\n    width: 305px;\n  }\n\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.04);\n  }\n`;\n\nconst Thumb = styled.div`\n  height: 402px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  overflow: hidden;\n  background-color: ${(p) => p.theme.skeletonFrom};\n\n  @media ${breakpoints.tablet} {\n    height: 455px;\n  }\n\n  @media ${breakpoints.desktop} {\n    height: 449px;\n  }\n`;\n\nconst Picture = styled.picture`\n  width: 100%;\n`;\n\nconst Title = styled.h3`\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 12px / 14px;\n  color: ${(p) => p.theme.mainColor};\n`;\n\nconst Genres = styled.p`\n  margin-top: 4px;\n  font-size: 12px;\n  line-height: 12px / 14px;\n  font-weight: 500;\n  color: ${(p) => p.theme.accentColor};\n`;\n\nMovieCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  posterPath: PropTypes.string.isRequired,\n  genres: PropTypes.string,\n};\n\nexport default MovieCard;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { breakpoints } from 'constants/breakpoints';\n\nimport MovieCard from './MovieCard';\n\nconst MoviesGallery = ({ list }) => {\n  const renderGallery = () =>\n    list.map((item) => (\n      <Item key={item.id}>\n        <MovieCard {...item} />\n      </Item>\n    ));\n\n  return <Wrapper>{list.length > 0 ? renderGallery() : null}</Wrapper>;\n};\n\nconst Wrapper = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: -20px;\n\n  @media ${breakpoints.tablet} {\n    flex-direction: row;\n    align-items: flex-start;\n    margin-left: -32px;\n  }\n\n  @media ${breakpoints.desktop} {\n    margin-left: -16px;\n  }\n`;\n\nconst Item = styled.li`\n  margin-left: 20px;\n  margin-top: 20px;\n\n  @media ${breakpoints.tablet} {\n    flex-basis: calc((100% - (2 * 32px)) / 2);\n    margin-left: 32px;\n    margin-top: 32px;\n  }\n\n  @media ${breakpoints.desktop} {\n    flex-basis: calc((100% - (3 * 16px)) / 3);\n    margin-left: 16px;\n    margin-top: 32px;\n  }\n`;\n\nMoviesGallery.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      posterPath: PropTypes.string.isRequired,\n      genres: PropTypes.string,\n    })\n  ),\n};\n\nexport default MoviesGallery;\n","import { useState } from 'react';\n\nconst SearchForm = ({ onSearch }) => {\n  const [value, setValue] = useState('');\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n\n    const query = value.trim();\n    if (query) {\n      onSearch(value);\n      e.target.reset();\n    }\n  };\n\n  return (\n    <form onSubmit={handleSearch}>\n      <input value={value} onChange={(e) => setValue(e.target.value)} />\n      <button type=\"submit\">search</button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { fetchSearch } from 'services/fetchMoviesData';\n\nimport SkeletonHomePage from 'components/Skeletons/SkeletonHomePage';\n\nimport MoviesGallery from 'components/MoviesGallery';\nimport Container from 'components/UI/Container';\nimport Section from 'components/UI/Section';\nimport SearchForm from 'components/SearchForm';\n\nimport { mappedMovies } from 'utils/mappedMoviesList';\n\nconst PARAM_QUERY = 'query';\n\nconst MoviePage = ({ genresList }) => {\n  const [loading, setLoading] = useState(false);\n  const [moviesList, setMoviesList] = useState([]);\n  const [queryParam, setQueryParam] = useSearchParams({});\n\n  useEffect(() => {\n    const query = queryParam.get(PARAM_QUERY);\n\n    if (query) handleSearch(query);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleSearch = (value) => {\n    setLoading(true);\n    setQueryParam({ [PARAM_QUERY]: value });\n\n    fetchSearch('en', 1, value)\n      .then((res) => {\n        setLoading(false);\n        setMoviesList(mappedMovies(genresList, res.list));\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.error(err);\n      });\n  };\n\n  if (loading) return <SkeletonHomePage />;\n\n  return (\n    <Section>\n      <Container>\n        <SearchForm onSearch={handleSearch} />\n        <MoviesGallery list={moviesList} />\n      </Container>\n    </Section>\n  );\n};\n\nexport default MoviePage;\n","export const filteredGenres = (genresList, IDs) => {\n  if (genresList.length && IDs) {\n    const str = IDs.map((ID) => genresList.find((genre) => genre.id === ID))\n      .map((item) => item?.name)\n      .join(', ');\n\n    if (str) return str;\n  }\n\n  return '';\n};\n","import { filteredGenres } from 'utils/filteredGenres';\n\nexport const mappedMovies = (genresList, list) =>\n  list.map((item) => ({\n    id: item.id,\n    title: item.title,\n    posterPath: item.poster_path,\n    genres: filteredGenres(genresList, item.genre_ids),\n  }));\n"],"names":["Wrapper","styled","p","theme","transition","breakpoints","Thumb","skeletonFrom","Picture","Title","mainColor","Genres","accentColor","id","title","posterPath","genres","to","srcSet","media","alt","loading","src","Item","list","length","map","item","onSearch","useState","value","setValue","onSubmit","e","preventDefault","trim","target","reset","onChange","type","PARAM_QUERY","genresList","setLoading","moviesList","setMoviesList","useSearchParams","queryParam","setQueryParam","useEffect","query","get","handleSearch","fetchSearch","then","res","mappedMovies","catch","err","console","error","SkeletonHomePage","Section","Container","MoviesGallery","filteredGenres","IDs","str","ID","find","genre","name","join","poster_path","genre_ids"],"sourceRoot":""}